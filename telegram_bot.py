import asyncio
import logging
import os
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from decimal import Decimal
from datetime import datetime, time
import aiohttp
import pytz
from monitoring_scanner import Scanner

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
CMC_API_KEY = os.getenv("CMC_API_KEY")
ALLOWED_USERS = [
    (501156257, "–°–µ—Ä–≥–µ–π"), (5070159060, "–í–∞—Å–µ–∫"), (1182677771, "–¢–æ–ª–∏–∫"),
    (6322048522, "–ö—É–º–µ—Ü"), (1725998320, "–°–≤–µ—Ç–∞"), (7009557842, "–õ–∞–π—Ñ")
]
ADMIN_ID = 501156257
INTERVAL = 60
CONFIRMATION_INTERVAL = 20
CONFIRMATION_COUNT = 3
RESTART_TIMES = ["21:00"]

def is_silent_hour(user_id, now_kyiv, user_states):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –≤—Ä–µ–º—è –≤ —Ç–∏—Ö–∏—Ö —á–∞—Å–∞—Ö."""
    if not user_states[user_id].get('silent_enabled', True):
        return False
    start_time, end_time = time(0, 0), time(8, 0)
    now_time = now_kyiv.time()
    return start_time <= now_time <= end_time if start_time <= end_time else now_time >= start_time or now_time <= end_time

async def schedule_restart():
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –∑–∞–¥–∞—á –±–æ—Ç–∞."""
    while True:
        try:
            now_kyiv = datetime.now(pytz.timezone('Europe/Kyiv'))
            if now_kyiv.strftime("%H:%M") in RESTART_TIMES:
                logger.info("Scheduled restart triggered")
                for user_id, _ in ALLOWED_USERS:
                    await state.reset_notified_levels(user_id)
                await asyncio.sleep(60)
            else:
                await asyncio.sleep(30)
        except Exception as e:
            logger.error(f"Error in schedule_restart: {str(e)}")
            await asyncio.sleep(30)

class BotState:
    def __init__(self, scanner):
        self.bot = Bot(token=TELEGRAM_TOKEN)
        self.dp = Dispatcher()
        self.scanner = scanner
        self.user_states = {}
        self.pending_commands = {}
        self.message_ids = {}
        self.l2_data_cache = None
        self.l2_data_time = None
        self.fear_greed_cache = None
        self.fear_greed_time = None
        self.fear_greed_cooldown = 300
        self.converter_cache = None
        self.converter_cache_time = None
        self.user_stats = {}
        self.is_first_run = True
        self.price_fetch_interval = 300
        logger.info("BotState initialized")

    async def check_db_connection(self):
        logger.info("No database used, connection check skipped")
        return True

    async def init_user_state(self, user_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id not in self.user_states:
            self.user_states[user_id] = {
                'prev_level': None, 'last_measured_gas': None, 'current_levels': [],
                'default_levels': [], 'user_added_levels': [], 'active_level': None,
                'confirmation_states': {}, 'notified_levels': set(), 'silent_enabled': True
            }
            await self.load_or_set_default_levels(user_id)

    def init_user_stats(self, user_id):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        if user_id not in self.user_stats:
            self.user_stats[user_id] = {}
        today = datetime.now(pytz.timezone('Europe/Kyiv')).date().isoformat()
        default_stats = {
            "–ì–∞–∑": 0, "Manta Price": 0, "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ L2": 0, "–ó–∞–¥–∞—Ç—å –£—Ä–æ–≤–Ω–∏": 0,
            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": 0, "–ê–¥–º–∏–Ω": 0, "–°—Ç—Ä–∞—Ö –∏ –ñ–∞–¥–Ω–æ—Å—Ç—å": 0, "–¢–∏—Ö–∏–µ –ß–∞—Å—ã": 0,
            "Manta –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä": 0, "–ì–∞–∑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": 0
        }
        self.user_stats[user_id][today] = self.user_stats[user_id].get(today, default_stats)

    async def check_access(self, message: types.Message):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        chat_id = message.chat.id
        if chat_id not in [user[0] for user in ALLOWED_USERS]:
            await self.bot.send_message(chat_id, "‚õΩ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.")
            logger.warning(f"Access denied for chat_id={chat_id}")
            return False
        await self.init_user_state(chat_id)
        self.init_user_stats(chat_id)
        return True

    async def update_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è."""
        try:
            msg = await self.bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=reply_markup)
            self.message_ids[chat_id] = msg.message_id
        except Exception as e:
            logger.error(f"Failed to send message to chat_id={chat_id}: {e}")

    async def reset_notified_levels(self, chat_id):
        """–°–±—Ä–æ—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω—ã—Ö —É—Ä–æ–≤–Ω–µ–π."""
        self.user_states[chat_id]['notified_levels'].clear()
        logger.info(f"Cleared notified levels for chat_id={chat_id}")

    async def confirm_level_crossing(self, chat_id, initial_value, direction, target_level):
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è —É—Ä–æ–≤–Ω—è –≥–∞–∑–∞."""
        kyiv_tz = pytz.timezone('Europe/Kyiv')
        now_kyiv = datetime.now(kyiv_tz)
        if is_silent_hour(chat_id, now_kyiv, self.user_states):
            logger.info(f"Silent hours active for chat_id={chat_id}, skipping notification")
            return

        state = self.user_states[chat_id]['confirmation_states'].setdefault(target_level, {
            'count': 0, 'values': [], 'target_level': target_level, 'direction': direction
        })
        state['count'] = 1
        state['values'] = [initial_value]

        for i in range(CONFIRMATION_COUNT - 1):
            await asyncio.sleep(CONFIRMATION_INTERVAL)
            current_slow = await self.scanner.get_current_gas()
            if current_slow is None:
                logger.error(f"Failed to get gas on attempt {i + 2} for chat_id={chat_id}")
                del self.user_states[chat_id]['confirmation_states'][target_level]
                return
            state['count'] += 1
            state['values'].append(current_slow)

        values = state['values']
        is_confirmed = all(v <= target_level for v in values) if direction == 'down' else all(v >= target_level for v in values)

        if is_confirmed and target_level not in self.user_states[chat_id]['notified_levels']:
            notification_message = (
                f"<pre>{'üü©' if direction == 'down' else 'üü•'} ‚óÜ –ì–ê–ó {'–£–ú–ï–ù–¨–®–ò–õ–°–Ø' if direction == 'down' else '–£–í–ï–õ–ò–ß–ò–õ–°–Ø'} –¥–æ: {values[-1]:.6f} Gwei\n"
                f"–£—Ä–æ–≤–µ–Ω—å: {target_level:.6f} Gwei –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω</pre>"
            )
            for user_id, _ in ALLOWED_USERS:
                if user_id == chat_id or target_level in self.user_states[user_id]['current_levels']:
                    await self.update_message(user_id, notification_message, create_keyboard(user_id, 'main'))
                    self.user_states[user_id]['notified_levels'].add(target_level)
                    self.user_states[user_id]['active_level'] = target_level
                    self.user_states[user_id]['prev_level'] = self.user_states[user_id]['last_measured_gas']

        del self.user_states[chat_id]['confirmation_states'][target_level]

    async def get_manta_gas(self, chat_id, force_base_message=False):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≥–∞–∑–∞ Manta Pacific."""
        current_slow = await self.scanner.get_current_gas()
        if current_slow is None:
            await self.update_message(chat_id, "<b>‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Manta Pacific</b>", create_keyboard(chat_id, 'main'))
            return

        gas_str = f"{current_slow:.6f}"
        zeros = len(gas_str.split('.')[1].rstrip('0')) - len(gas_str.split('.')[1].rstrip('0').lstrip('0'))
        base_message = f"<pre>‚õΩÔ∏è Manta Pacific Gas\n‚óÜ <b>–¢–ï–ö–£–©–ò–ô –ì–ê–ó</b>:   {current_slow:.6f} Gwei  ({zeros})</pre>"

        self.user_states[chat_id]['last_measured_gas'] = current_slow
        levels = self.user_states[chat_id]['current_levels'] or await self.load_or_set_default_levels(chat_id)

        if not levels or force_base_message or self.user_states[chat_id]['prev_level'] is None:
            await self.update_message(chat_id, base_message + ("\n\n–£—Ä–æ–≤–Ω–∏ –Ω–µ –∑–∞–¥–∞–Ω—ã." if not levels else ""), create_keyboard(chat_id, 'main'))
        else:
            kyiv_tz = pytz.timezone('Europe/Kyiv')
            if is_silent_hour(chat_id, datetime.now(kyiv_tz), self.user_states):
                self.user_states[chat_id]['prev_level'] = current_slow
                return
            sorted_levels = sorted(levels)
            closest_level = min(sorted_levels, key=lambda x: abs(x - current_slow))
            prev_level = self.user_states[chat_id]['prev_level']
            if prev_level < closest_level <= current_slow and closest_level not in self.user_states[chat_id]['confirmation_states']:
                asyncio.create_task(self.confirm_level_crossing(chat_id, current_slow, 'up', closest_level))
            elif prev_level > closest_level >= current_slow and closest_level not in self.user_states[chat_id]['confirmation_states']:
                asyncio.create_task(self.confirm_level_crossing(chat_id, current_slow, 'down', closest_level))

        self.user_states[chat_id]['active_level'] = min(levels, key=lambda x: abs(x - current_slow)) if levels else None
        self.user_states[chat_id]['prev_level'] = current_slow

    async def load_or_set_default_levels(self, user_id):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ä–æ–≤–Ω–µ–π –≥–∞–∑–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        try:
            default_levels = [Decimal(str(x / 10000)) for x in range(100, 0, -5)] + [Decimal('0.000050')]
            self.user_states[user_id]['default_levels'] = default_levels
            self.user_states[user_id]['user_added_levels'] = []
            self.user_states[user_id]['current_levels'] = default_levels.copy()
            return default_levels
        except Exception as e:
            logger.error(f"Error setting default levels for user_id={user_id}: {str(e)}")
            return []

    async def set_silent_hours(self, chat_id, enable):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ç–∏—Ö–∏—Ö —á–∞—Å–æ–≤."""
        self.user_states[chat_id]['silent_enabled'] = enable
        await self.update_message(chat_id, f"–¢–∏—Ö–∏–µ –ß–∞—Å—ã {'–≤–∫–ª—é—á–µ–Ω—ã' if enable else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}: 00:00‚Äì08:00", create_keyboard(chat_id, 'main'))

    async def background_price_fetcher(self):
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Ü–µ–Ω."""
        while True:
            try:
                await asyncio.gather(self.fetch_converter_data(), self.fetch_l2_data())
            except Exception as e:
                logger.error(f"Error in background price fetch: {str(e)}")
            await asyncio.sleep(self.price_fetch_interval)

    async def fetch_converter_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞."""
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {"vs_currency": "usd", "ids": "manta-network,ethereum,bitcoin", "per_page": 3, "page": 1, "sparkline": "false"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status != 200:
                        return self.converter_cache
                    data = await response.json()
                    self.converter_cache = {coin["id"]: coin["current_price"] for coin in data}
                    self.converter_cache_time = datetime.now(pytz.timezone('Europe/Kyiv'))
                    return self.converter_cache
        except Exception as e:
            logger.error(f"Error fetching converter data: {str(e)}")
            return self.converter_cache

    async def convert_manta(self, chat_id, amount):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è MANTA –≤ –¥—Ä—É–≥–∏–µ –≤–∞–ª—é—Ç—ã."""
        prices = self.converter_cache or await self.fetch_converter_data()
        if not prices:
            await self.update_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", create_keyboard(chat_id, 'menu'))
            return None
        try:
            manta_usd = prices.get("manta-network")
            eth_usd = prices.get("ethereum")
            btc_usd = prices.get("bitcoin")
            result = {
                "USDT": amount * manta_usd,
                "ETH": amount * manta_usd / eth_usd if eth_usd else 0,
                "BTC": amount * manta_usd / btc_usd if btc_usd else 0
            }
            message = f"<pre>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {int(amount)} MANTA:\n‚óÜ USDT: {result['USDT']:.2f}\n‚óÜ ETH:  {result['ETH']:.6f}\n‚óÜ BTC:  {result['BTC']:.8f}</pre>"
            await self.update_message(chat_id, message, create_keyboard(chat_id, 'menu'))
            return True
        except Exception as e:
            logger.error(f"Error in convert_manta: {str(e)}")
            await self.update_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏.", create_keyboard(chat_id, 'menu'))
            return None

    async def calculate_gas_cost(self, chat_id, gas_price, tx_count):
        """–†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–∞–∑–∞."""
        prices = self.converter_cache or await self.fetch_converter_data()
        if not prices:
            await self.update_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", create_keyboard(chat_id, 'main'))
            return None
        try:
            eth_usd = prices.get("ethereum")
            fee_per_tx_eth = gas_price * 1000000 / 10**9
            total_cost_usdt = fee_per_tx_eth * tx_count * eth_usd
            message = f"<pre>{int(tx_count)} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –≥–∞–∑ {gas_price:.6f} Gwei = {total_cost_usdt:.4f} USDT</pre>"
            await self.update_message(chat_id, message, create_keyboard(chat_id, 'main'))
            return True
        except Exception as e:
            logger.error(f"Error in calculate_gas_cost: {str(e)}")
            await self.update_message(chat_id, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≥–∞–∑–∞.", create_keyboard(chat_id, 'main'))
            return None

    async def fetch_l2_data(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö L2 —Ç–æ–∫–µ–Ω–æ–≤."""
        l2_tokens = {
            "MANTA": "manta-network", "Optimism": "optimism", "Arbitrum": "arbitrum",
            "Starknet": "starknet", "ZKsync": "zksync", "Scroll": "scroll",
            "Mantle": "mantle", "Taiko": "taiko"
        }
        url = "https://api.coingecko.com/api/v3/coins/markets"
        params = {"vs_currency": "usd", "ids": ",".join(l2_tokens.values()), "per_page": 250, "page": 1, "sparkline": "false", "price_change_percentage": "24h,7d,30d"}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, params=params) as response:
                    if response.status != 200:
                        return self.l2_data_cache or {}
                    data = await response.json()
                    token_data = {}
                    token_map = {coin["id"]: coin for coin in data}
                    for name, token_id in l2_tokens.items():
                        coin = token_map.get(token_id, {})
                        price = coin.get("current_price", "–ù/–î")
                        price_change_all = ((price - coin.get("ath", price)) / coin.get("ath", price) * 100) if price != "–ù/–î" and coin.get("ath") else "–ù/–î"
                        ath_date = datetime.strptime(coin.get("ath_date", "1970-01-01T00:00:00.000Z"), "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y") if coin.get("ath_date") else "–ù/–î"
                        atl_date = datetime.strptime(coin.get("atl_date", "1970-01-01T00:00:00.000Z"), "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y") if coin.get("atl_date") else "–ù/–î"
                        token_data[name] = {
                            "price": price,
                            "24h": coin.get("price_change_percentage_24h_in_currency", "–ù/–î"),
                            "7d": coin.get("price_change_percentage_7d_in_currency", "–ù/–î"),
                            "30d": coin.get("price_change_percentage_30d_in_currency", "–ù/–î"),
                            "all": price_change_all,
                            "ath_price": coin.get("ath", "–ù/–î"),
                            "ath_date": ath_date,
                            "atl_price": coin.get("atl", "–ù/–î"),
                            "atl_date": atl_date
                        }
                    self.l2_data_cache = token_data
                    self.l2_data_time = datetime.now(pytz.timezone('Europe/Kyiv'))
                    return token_data
        except Exception as e:
            logger.error(f"Error fetching L2 data: {str(e)}")
            return self.l2_data_cache or {}

    async def fetch_fear_greed(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏."""
        current_time = datetime.now(pytz.timezone('Europe/Kyiv'))
        if self.fear_greed_time and (current_time - self.fear_greed_time).total_seconds() < self.fear_greed_cooldown:
            return self.fear_greed_cache
        url = "https://pro-api.coinmarketcap.com/v3/fear-and-greed/historical"
        headers = {"X-CMC_PRO_API_KEY": CMC_API_KEY}
        params = {"limit": 30}
        try:
            async with aiohttp.ClientSession() as session:
                async with session.get(url, headers=headers, params=params) as response:
                    if response.status != 200:
                        return None
                    data = await response.json()
                    fg_data = data.get("data", [])
                    if not fg_data:
                        return None
                    current = fg_data[0]
                    year_data = fg_data[:365]
                    year_values = [(int(d["value"]), d["timestamp"], d["value_classification"]) for d in year_data]
                    max_year = max(year_values, key=lambda x: x[0]) if year_values else (0, "1970-01-01", "")
                    min_year = min(year_values, key=lambda x: x[0]) if year_values else (0, "1970-01-01", "")
                    parse_timestamp = lambda ts: datetime.strptime(ts, "%Y-%m-%dT%H:%M:%S.%fZ").strftime("%d.%m.%Y") if 'T' in ts else datetime.fromtimestamp(int(ts)).strftime("%d.%m.%Y")
                    fear_greed_data = {
                        "current": {"value": int(current["value"]), "category": current["value_classification"]},
                        "yesterday": {"value": int(fg_data[1]["value"]), "category": fg_data[1]["value_classification"]},
                        "week_ago": {"value": int(fg_data[7]["value"]) if len(fg_data) > 7 else 0, "category": fg_data[7]["value_classification"] if len(fg_data) > 7 else ""},
                        "month_ago": {"value": int(fg_data[-1]["value"]), "category": fg_data[-1]["value_classification"]},
                        "year_max": {"value": max_year[0], "date": parse_timestamp(max_year[1]), "category": max_year[2]},
                        "year_min": {"value": min_year[0], "date": parse_timestamp(min_year[1]), "category": min_year[2]}
                    }
                    self.fear_greed_cache = fear_greed_data
                    self.fear_greed_time = current_time
                    return fear_greed_data
        except Exception as e:
            logger.error(f"Error fetching Fear & Greed: {str(e)}")
            return None

    async def get_manta_price(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã MANTA."""
        token_data = self.l2_data_cache or await self.fetch_l2_data()
        if not token_data:
            await self.update_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", create_keyboard(chat_id, 'main'))
            return
        manta_data = token_data["MANTA"]
        spot_volume = await self.scanner.get_manta_spot_volume()
        futures_volume = await self.scanner.get_manta_futures_volume()
        spot_volume_str = f"{round(spot_volume / Decimal('1000000'))}M$" if spot_volume else "–ù/–î"
        futures_volume_str = f"{round(futures_volume / Decimal('1000000'))}M$" if futures_volume else "–ù/–î"
        message = (
            f"<pre>ü¶é –î–∞–Ω–Ω—ã–µ —Å CoinGecko:\n"
            f"‚óÜ MANTA/USDT: ${float(manta_data['price']):.3f}\n\n"
            f"‚óÜ –ò–ó–ú–ï–ù–ï–ù–ò–ï:\n"
            f"‚óÜ 24 –ß–ê–°–ê:     {float(manta_data['24h']):>6.2f}%\n"
            f"‚óÜ 7 –î–ù–ï–ô:      {float(manta_data['7d']):>6.2f}%\n"
            f"‚óÜ –ú–ï–°–Ø–¶:       {float(manta_data['30d']):>6.2f}%\n"
            f"‚óÜ –í–°–ï –í–†–ï–ú–Ø:   {float(manta_data['all']):>6.2f}%\n\n"
            f"‚óÜ Binance Volume Trade 24—á:\n"
            f"‚óÜ (Futures):   {futures_volume_str}\n"
            f"‚óÜ (Spot):      {spot_volume_str}\n\n"
            f"‚óÜ ${float(manta_data['ath_price']):.2f} ({manta_data['ath_date']})\n"
            f"‚óÜ ${float(manta_data['atl_price']):.2f} ({manta_data['atl_date']})</pre>"
        )
        await self.update_message(chat_id, message, create_keyboard(chat_id, 'main'))

    async def get_l2_comparison(self, chat_id):
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ L2 —Ç–æ–∫–µ–Ω–æ–≤."""
        token_data = self.l2_data_cache or await self.fetch_l2_data()
        if not token_data:
            await self.update_message(chat_id, "‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.", create_keyboard(chat_id, 'main'))
            return
        message = "<pre>ü¶é –î–∞–Ω–Ω—ã–µ —Å CoinGecko:\n"
        for period, label in [("24h", "24 —á–∞—Å–∞"), ("7d", "7 –¥–Ω–µ–π"), ("30d", "–º–µ—Å—è—Ü"), ("all", "–≤—Å–µ –≤—Ä–µ–º—è")]:
            message += f"‚óÜ –°—Ä–∞–≤–Ω–µ–Ω–∏–µ L2 —Ç–æ–∫–µ–Ω–æ–≤ ({label}):\n"
            sorted_data = sorted(
                token_data.items(),
                key=lambda x: float(x[1][period]) if x[1][period] not in ("–ù/–î", None) else float('-inf'),
                reverse=True
            )
            for name, data in sorted_data:
                price_str = f"${float(data['price']):.3f}" if data['price'] not in ("–ù/–î", None) else "–ù/–î"
                change_str = f"{float(data[period]):>6.2f}%" if data[period] not in ("–ù/–î", None) else "–ù/–î"
                message += f"‚óÜ {name:<9}: {price_str} | {change_str}\n"
        message += "</pre>"
        await self.update_message(chat_id, message, create_keyboard(chat_id, 'main'))

    async def get_fear_greed(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏."""
        fg_data = await self.fetch_fear_greed()
        if not fg_data:
            await self.update_message(chat_id, "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ Fear & Greed.", create_keyboard(chat_id, 'main'))
            return
        bar_length = 20
        filled = int(fg_data["current"]["value"] / 100 * bar_length)
        progress_bar = f"üî¥ {'‚ñà' * filled}{'‚ñÅ' * (bar_length - filled)} üü¢"
        message = (
            f"<pre>‚óÜ –ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏: {fg_data['current']['value']}\n\n"
            f"{progress_bar}\n\n"
            f"–ò—Å—Ç–æ—Ä–∏—è:\n"
            f"üïí –í—á–µ—Ä–∞: {fg_data['yesterday']['value']}\n"
            f"üïí –ü—Ä–æ—à–ª–∞—è –Ω–µ–¥–µ–ª—è: {fg_data['week_ago']['value']}\n"
            f"üïí –ü—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü: {fg_data['month_ago']['value']}\n\n"
            f"–ì–æ–¥–æ–≤—ã–µ —ç–∫—Å—Ç—Ä–µ–º—É–º—ã:\n"
            f"üìà –ú–∞–∫—Å: {fg_data['year_max']['value']} ({fg_data['year_max']['date']})\n"
            f"üìâ –ú–∏–Ω: {fg_data['year_min']['value']} ({fg_data['year_min']['date']})</pre>"
        )
        await self.update_message(chat_id, message, create_keyboard(chat_id, 'main'))

    async def get_admin_stats(self, chat_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∞."""
        if chat_id != ADMIN_ID:
            await self.update_message(chat_id, "–î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞.", create_keyboard(chat_id, 'main'))
            return
        today = datetime.now(pytz.timezone('Europe/Kyiv')).date().isoformat()
        message = "<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n<pre>"
        has_activity = False
        for user_id, user_name in ALLOWED_USERS:
            if user_id == ADMIN_ID:
                continue
            stats = self.user_stats.get(user_id, {}).get(today, {})
            if any(stats.values()):
                message += f"{user_id} {user_name}\n" + "\n".join(f"{k} - {v}" for k, v in stats.items() if v > 0) + "\n\n"
                has_activity = True
        message += "</pre>" if has_activity else "–°–µ–≥–æ–¥–Ω—è –Ω–∏–∫—Ç–æ –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∞) –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –±–æ—Ç–∞."
        await self.update_message(chat_id, message, create_keyboard(chat_id, 'main'))

def create_keyboard(chat_id, keyboard_type):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø–æ —Ç–∏–ø—É."""
    keyboards = {
        'main': [[types.KeyboardButton(text="–ì–∞–∑"), types.KeyboardButton(text="–ú–µ–Ω—é")]] + ([[types.KeyboardButton(text="–ê–¥–º–∏–Ω")]] if chat_id == ADMIN_ID else []),
        'menu': [
            [types.KeyboardButton(text="Manta –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä"), types.KeyboardButton(text="–ì–∞–∑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")],
            [types.KeyboardButton(text="Manta Price"), types.KeyboardButton(text="–°—Ä–∞–≤–Ω–µ–Ω–∏–µ L2")],
            [types.KeyboardButton(text="–°—Ç—Ä–∞—Ö –∏ –ñ–∞–¥–Ω–æ—Å—Ç—å"), types.KeyboardButton(text="–¢–∏—Ö–∏–µ –ß–∞—Å—ã")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")]
        ],
        'silent_hours': [
            [types.KeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –¢–∏—Ö–∏–µ –ß–∞—Å—ã"), types.KeyboardButton(text="–í–∫–ª—é—á–∏—Ç—å –¢–∏—Ö–∏–µ –ß–∞—Å—ã")],
            [types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]
        ],
        'converter': [[types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        'gas_calculator': [[types.KeyboardButton(text="–ù–∞–∑–∞–¥"), types.KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]]
    }
    return types.ReplyKeyboardMarkup(keyboard=keyboards.get(keyboard_type, keyboards['main']), resize_keyboard=True, one_time_keyboard=False)

scanner = Scanner()
state = BotState(scanner)

@state.dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start."""
    if not await state.check_access(message):
        return
    await state.update_message(message.chat.id, "<b>–ë–æ—Ç –¥–ª—è Manta Pacific –∑–∞–ø—É—â–µ–Ω.</b>\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", create_keyboard(message.chat.id, 'main'))
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"Failed to delete start message: {e}")

@state.dp.message(lambda message: message.text in [
    "–ì–∞–∑", "Manta Price", "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ L2", "–°—Ç—Ä–∞—Ö –∏ –ñ–∞–¥–Ω–æ—Å—Ç—å", "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
    "–ê–¥–º–∏–Ω", "–¢–∏—Ö–∏–µ –ß–∞—Å—ã", "–ú–µ–Ω—é", "–ù–∞–∑–∞–¥", "Manta –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "–ì–∞–∑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"
])
async def handle_main_button(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫."""
    if not await state.check_access(message):
        return
    chat_id = message.chat.id
    text = message.text
    today = datetime.now(pytz.timezone('Europe/Kyiv')).date().isoformat()
    if text not in ["–ú–µ–Ω—é", "–ù–∞–∑–∞–¥"]:
        state.user_stats[chat_id][today][text] += 1
    if chat_id in state.pending_commands and text not in ["–¢–∏—Ö–∏–µ –ß–∞—Å—ã", "Manta –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "–ì–∞–∑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]:
        del state.pending_commands[chat_id]

    levels = state.user_states[chat_id]['current_levels']
    levels_text = "\n".join(f"‚óÜ {level:.6f} Gwei" for level in levels) if levels else "–£—Ä–æ–≤–Ω–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã."

    handlers = {
        "–ì–∞–∑": lambda: state.get_manta_gas(chat_id, force_base_message=True),
        "Manta Price": lambda: state.get_manta_price(chat_id),
        "–°—Ä–∞–≤–Ω–µ–Ω–∏–µ L2": lambda: state.get_l2_comparison(chat_id),
        "–°—Ç—Ä–∞—Ö –∏ –ñ–∞–¥–Ω–æ—Å—Ç—å": lambda: state.get_fear_greed(chat_id),
        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": lambda: state.update_message(
            chat_id,
            f"<b><pre>–¢–ï–ö–£–©–ò–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø:\n\n{levels_text}</pre></b>",
            create_keyboard(chat_id, 'main')
        ),
        "–ê–¥–º–∏–Ω": lambda: state.get_admin_stats(chat_id),
        "–¢–∏—Ö–∏–µ –ß–∞—Å—ã": lambda: state.update_message(chat_id, f"–¢–∏—Ö–∏–µ –ß–∞—Å—ã {'–≤–∫–ª—é—á–µ–Ω—ã' if state.user_states[chat_id]['silent_enabled'] else '–æ—Ç–∫–ª—é—á–µ–Ω—ã'}: 00:00‚Äì08:00", create_keyboard(chat_id, 'silent_hours')),
        "Manta –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä": lambda: state.update_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ MANTA –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:", create_keyboard(chat_id, 'converter')),
        "–ì–∞–∑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä": lambda: state.update_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≥–∞–∑–∞ –≤ Gwei (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0015):", create_keyboard(chat_id, 'gas_calculator')),
        "–ú–µ–Ω—é": lambda: state.update_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", create_keyboard(chat_id, 'menu')),
        "–ù–∞–∑–∞–¥": lambda: state.update_message(chat_id, "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", create_keyboard(chat_id, 'main'))
    }
    if text in ["–¢–∏—Ö–∏–µ –ß–∞—Å—ã", "Manta –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä", "–ì–∞–∑ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"]:
        state.pending_commands[chat_id] = {'step': text.lower().replace(' ', '_') + '_input'}
    await handlers.get(text, lambda: None)()
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"Failed to delete message: {e}")

@state.dp.message()
async def process_value(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –≤–≤–æ–¥–æ–≤."""
    if not await state.check_access(message):
        return
    chat_id = message.chat.id
    text = message.text.strip()
    if chat_id not in state.pending_commands:
        await state.update_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫.", create_keyboard(chat_id, 'main'))
        return

    state_data = state.pending_commands[chat_id]
    handlers = {
        'manta_converter_input': lambda: handle_converter_input(chat_id, text),
        'gas_calculator_input': lambda: handle_gas_calculator_input(chat_id, text, state_data),
        'silent_hours_input': lambda: handle_silent_hours_input(chat_id, text)
    }

    async def handle_converter_input(chat_id, text):
        if text in ["–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥"]:
            await state.update_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." if text == "–û—Ç–º–µ–Ω–∞" else "–í–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é.", create_keyboard(chat_id, 'main' if text == "–û—Ç–º–µ–Ω–∞" else 'menu'))
            del state.pending_commands[chat_id]
            return
        try:
            amount = float(text.replace(',', '.'))
            if amount <= 0:
                raise ValueError
            await state.convert_manta(chat_id, amount)
            del state.pending_commands[chat_id]
        except ValueError:
            await state.update_message(chat_id, "–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.", create_keyboard(chat_id, 'converter'))

    async def handle_gas_calculator_input(chat_id, text, state_data):
        if text in ["–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥"]:
            if text == "–û—Ç–º–µ–Ω–∞" or state_data['step'] == 'gas_calculator_gas_input':
                await state.update_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", create_keyboard(chat_id, 'main'))
            else:
                state_data['step'] = 'gas_calculator_gas_input'
                await state.update_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≥–∞–∑–∞ –≤ Gwei (–Ω–∞–ø—Ä–∏–º–µ—Ä, 0.0015):", create_keyboard(chat_id, 'gas_calculator'))
            del state.pending_commands[chat_id] if text == "–û—Ç–º–µ–Ω–∞" else None
            return
        try:
            if state_data['step'] == 'gas_calculator_gas_input':
                gas_price = float(text.replace(',', '.'))
                if gas_price <= 0:
                    raise ValueError
                state_data['gas_price'] = gas_price
                state_data['step'] = 'gas_calculator_tx_count_input'
                await state.update_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100):", create_keyboard(chat_id, 'gas_calculator'))
            else:
                tx_count = int(text)
                if tx_count <= 0:
                    raise ValueError
                await state.calculate_gas_cost(chat_id, state_data['gas_price'], tx_count)
                del state.pending_commands[chat_id]
        except ValueError:
            await state.update_message(chat_id, f"–û—à–∏–±–∫–∞: –≤–≤–µ–¥–∏—Ç–µ {'–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ' if state_data['step'] == 'gas_calculator_gas_input' else '—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ'}.", create_keyboard(chat_id, 'gas_calculator'))

    async def handle_silent_hours_input(chat_id, text):
        if text in ["–û—Ç–º–µ–Ω–∞", "–ù–∞–∑–∞–¥"]:
            await state.update_message(chat_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." if text == "–û—Ç–º–µ–Ω–∞" else "–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", create_keyboard(chat_id, 'main'))
            del state.pending_commands[chat_id]
            return
        if text in ["–û—Ç–∫–ª—é—á–∏—Ç—å –¢–∏—Ö–∏–µ –ß–∞—Å—ã", "–í–∫–ª—é—á–∏—Ç—å –¢–∏—Ö–∏–µ –ß–∞—Å—ã"]:
            await state.set_silent_hours(chat_id, text == "–í–∫–ª—é—á–∏—Ç—å –¢–∏—Ö–∏–µ –ß–∞—Å—ã")
            del state.pending_commands[chat_id]
        else:
            await state.update_message(chat_id, "–¢–∏—Ö–∏–µ –ß–∞—Å—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω—ã: 00:00‚Äì08:00. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", create_keyboard(chat_id, 'silent_hours'))

    await handlers.get(state_data['step'], lambda: state.update_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", create_keyboard(chat_id, 'main')))()
    try:
        await message.delete()
    except Exception as e:
        logger.error(f"Failed to delete message: {e}")

async def monitor_gas_callback(gas_value):
    """–û–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≥–∞–∑–∞."""
    if state.is_first_run:
        for user_id, _ in ALLOWED_USERS:
            state.user_states[user_id]['last_measured_gas'] = gas_value
            state.user_states[user_id]['prev_level'] = gas_value
        state.is_first_run = False
        return
    for user_id, _ in ALLOWED_USERS:
        await asyncio.sleep(1)
        await state.get_manta_gas(user_id, force_base_message=False)